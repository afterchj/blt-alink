<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.tpadsz.after.dao.BltConsoleDao">

    <parameterMap id="consoleMapper" type="map">
        <parameter property="uid" mode="IN"/>
        <parameter property="meshId" mode="IN"/>
        <parameter property="placeId" mode="IN"/>
        <parameter property="gid" mode="IN"/>
        <parameter property="lmac" mode="IN"/>
        <parameter property="cmd" mode="IN"/>
        <parameter property="x" mode="IN"/>
        <parameter property="y" mode="IN"/>
        <parameter property="result" mode="OUT" jdbcType="INTEGER"/>
    </parameterMap>

    <sql id="common_choose">
        <if test="uid!=null and uid!=''">
            <choose>
                <when test="role == 'salesman'">
                    AND s.uid IN (SELECT c.uid FROM f_user_customer c WHERE fid=(SELECT fid FROM f_user_customer WHERE
                    uid=#{uid}))
                </when>
                <otherwise>
                    AND s.uid =#{uid}
                </otherwise>
            </choose>
        </if>
    </sql>
    <select id="saveOperation" parameterMap="consoleMapper" statementType="CALLABLE">
		CALL save_operation (?,?,?,?,?,?,?,?,?)
	</select>

    <update id="saveSceneName" parameterType="map">
		UPDATE f_scene
		SET sname = #{sname},update_date=NOW()
		WHERE
		scene_id = #{sceneId}
		AND mid = (
		SELECT
		id
		FROM
		f_mesh
		WHERE
		mesh_id = #{meshId}
		AND uid = #{uid}
		)
	</update>
    <select id="selectById" resultType="string" parameterType="java.lang.String">
        SELECT
        r.role_type
        FROM f_role r
        INNER JOIN f_user_role ur ON ur.role_id = r.id
        INNER JOIN f_user_account u ON u.id = ur.user_id
        WHERE u.id = #{uid}
    </select>
    <select id="getTotal" parameterType="map" resultType="int">
		SELECT COUNT(0) total
		FROM f_light l
		INNER JOIN f_mesh m ON m.id = l.mid
		WHERE 1 = 1
		AND m.mesh_id = #{meshId}
		AND m.uid = #{uid}
	</select>

    <select id="getPid" parameterType="map" resultType="Integer">
		SELECT id FROM f_place WHERE mid=(SELECT  id FROM f_mesh WHERE mesh_id =#{meshId} AND uid=#{uid}) limit 1
	</select>

    <select id="getAll" resultType="map" parameterType="map">
		SELECT
-- 			m.mesh_id,
		    s.scene_id,
			s.sname,
			g.group_id,
			g.gname,
			l.lmac,
			ls.x,
			ls.y,
			ls.off
		FROM
			f_mesh m
		INNER JOIN f_group g ON g.mid = m.id
		INNER JOIN f_light l ON g.id = l.gid
		INNER JOIN f_light_setting ls ON ls.lid = l.id
		INNER JOIN f_scene s ON s.id = ls.sid
		WHERE m.uid = #{uid}
		AND m.mesh_id =  #{meshId}
		ORDER BY s.scene_id,g.group_id
    </select>

    <select id="getScenes" resultType="map" parameterType="map">
        SELECT
        m.mesh_id,
        s.scene_id,
        s.sname
        FROM
        f_mesh m
        INNER JOIN f_scene s ON m.id = s.mid
        WHERE 1=1
        <include refid="common_choose"></include>
        <if test="sceneId!=null">
            AND s.scene_id=#{sceneId}
        </if>
        <if test="meshId!=null">
            AND m.mesh_id = #{meshId}
        </if>
        GROUP BY m.mesh_id,s.scene_id,s.sname
    </select>

    <select id="getCount" resultType="Integer" parameterType="map">
		SELECT COUNT(0) tcount FROM f_time_point WHERE sid = (
			SELECT s.id
			FROM f_mesh m
			INNER JOIN f_scene s ON m.id = s.mid
			WHERE s.uid = #{uid}
			AND m.mesh_id = #{meshId}
			AND s.scene_id=#{sceneId}
			)
	</select>
    <select id="getGroups" resultType="map" parameterType="map">
		SELECT
			m.mesh_id,
			g.group_id,
			g.gname,
-- 			IFNULL(g.pid,0) pid,
			IFNULL(l.lcount,0) lcount
		FROM
			f_group g
		LEFT JOIN f_place p ON p.id=g.pid
		LEFT JOIN f_mesh m ON m.id = g.mid
		LEFT JOIN (SELECT COUNT(0) lcount,gid FROM f_light GROUP BY gid) l ON g.id=l.gid
		WHERE 1=1
		AND m.uid = #{uid}
		AND m.mesh_id = #{meshId}
		GROUP BY m.mesh_id,g.group_id,g.gname,g.pid,l.lcount
	</select>

    <select id="getGroupsInfo" resultType="map" parameterType="map">
		SELECT
			g.id,
			g.group_id,
			g.gname,
			g.group_id,
			gs.x,
			gs.y,
			gs.focus,
			gs.vertical_angle,
			gs.horizontal_angle
		FROM f_group_setting gs
		INNER JOIN f_mesh m ON m.id=gs.mid
		INNER JOIN f_scene s ON s.id=gs.sid
		INNER JOIN f_group g ON gs.gid = g.id
		WHERE s.uid=#{uid}
		AND s.scene_id=#{sceneId}
		AND m.mesh_id=#{meshId}
		GROUP BY g.id
		ORDER BY g.id
	</select>

    <select id="getLightsInfo" resultType="map" parameterType="map">
		SELECT
			l.lmac,
			ls.x,
			ls.y,
			ls.focus,
			ls.vertical_angle,
			ls.horizontal_angle
		FROM f_light_setting ls
		INNER JOIN f_light l ON l.id=ls.lid
		INNER JOIN f_mesh m ON m.id=l.mid
		INNER JOIN f_scene s ON s.id=ls.sid
		WHERE s.uid=#{uid}
		AND s.scene_id=#{sceneId}
		AND m.mesh_id=#{meshId}
		GROUP BY l.id
		ORDER BY l.id
	</select>
    <delete id="deleteScene" parameterType="map">
		DELETE FROM f_scene
		WHERE scene_id = #{sceneId}
		AND mid = (
			SELECT
			id
			FROM
			f_mesh
			WHERE mesh_id = #{meshId}
			AND uid = #{uid}
		)
	</delete>

    <update id="saveApplyScene" parameterType="map">
		REPLACE INTO f_light_adjust(lid,x,y,focus,vertical_angle,horizontal_angle,create_date,update_date)
			SELECT
				l.id,
				ls.x,
				ls.y,,
				ls.focus,
				ls.vertical_angle,
				ls.horizontal_angle
				NOW(),
				NOW()
			FROM
				f_light l
			INNER JOIN f_light_setting ls ON l.id = ls.lid
			INNER JOIN f_scene s ON s.id=ls.sid
			WHERE 1 = 1
			AND s.scene_id = #{sceneId}
			AND l.mid = (
				SELECT
					id
				FROM
					f_mesh
				WHERE
					uid = #{uid}
				AND mesh_id = #{meshId}
			)GROUP BY l.id;
	</update>
    <update id="restScene" parameterType="map">
		UPDATE f_light_setting l,(SELECT x,y FROM f_scene_setting WHERE sid=#{sceneId}) r SET l.x=r.x,l.y = r.y,l.update_date=NOW() WHERE l.id IN (
			SELECT	rec.id
				FROM (SELECT ls.id FROM f_light_setting ls
					INNER JOIN f_light l ON l.id = ls.lid
					INNER JOIN f_mesh m ON m.id = l.mid
					INNER JOIN f_scene s ON s.id = ls.sid
					WHERE 1=1
					AND	s.uid =#{uid}
					AND s.scene_id = #{sceneId}
					AND m.mesh_id = #{meshId}
					GROUP BY l.id
					ORDER BY s.scene_id) rec
			)
	</update>
</mapper>